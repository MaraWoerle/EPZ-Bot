const { Client, Gate[OwayIntentBits, Partials, Collection, EmbedBuilder } = require('discord.js');
const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch');
const { token } = require('./config.json');
const upvote = '<:UpvoteArrow:857282900155957278>';
const downvote = '<:DownvoteArrow:857282899886735360>️';
const channelIds = ['1111410535272026253', '810844212181598218', '1251543222350512170'];

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,               // Intent for Guilds
        GatewayIntentBits.GuildMessages,        // Intent for Guild Messages
        GatewayIntentBits.MessageContent,       // Intent for Message Content
        GatewayIntentBits.GuildMessageReactions // Intent for Message Reactions
    ],
    partials: [Partials.Message, Partials.Channel, Partials.Reaction], // Necessary for uncached messages/reactions
});

client.commands = new Collection();
const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
    const filePath = path.join(commandsPath, file);
    const command = require(filePath);
    client.commands.set(command.data.name, command);
}

client.once('ready', () => {
    console.log('Ready!');
});

client.on('messageReactionAdd', async (reaction, user) => {
    if (user.bot) return;
    if (reaction.emoji.name !== upvote || reaction.emoji.name !== downvote) {
        setTimeout(() => updateReactionCount(reaction), 10000);
    }
});

client.on('messageReactionRemove', async (reaction, user) => {
    if (user.bot) return;
    if (reaction.emoji.name !== upvote || reaction.emoji.name !== downvote) {
        setTimeout(() => updateReactionCount(reaction), 10000);
    }
});

async function updateReactionCount(reaction) {
    const messageId = reaction.message.id;
    const reactionType = reaction.emoji.name === upvote ? 'reactionUpvote' : 'reactionDownvote';
    const reactionCount = reaction.count;

    const response = await fetch(`https://sheetdb.io/api/v1/5fsg4qfkegt2h/search?messageId=${messageId}`);
    const data = await response.json();

    if (data.length === 0) {
        console.error('Message not found in SheetsDB:', messageId);
        return;
    }

    const updatedData = {
        ...data[0],
        [reactionType]: reactionCount-1
    };

    const updateResponse = await fetch(`https://sheetdb.io/api/v1/5fsg4qfkegt2h/messageId/${messageId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({data: [updatedData]})
    });
    if (!updateResponse.ok) {
        console.error('Update response from SheetsDB:', updateResponse);
        throw new Error(`Failed to update reaction: ${updateResponse.statusText}`);
    }
}


client.on('messageCreate', async message => {
    // Ignore messages from the bot itself
    if (message.author.bot) return;
    if (!channelIds.includes(message.channel.id)) return;

    let content;
    if (message.content !== '') {
        content = message.content;
    } else if (message.stickers.size > 0) {
        const firstSticker = message.stickers.first();
        content = firstSticker.url; // This is the URL to the sticker image
    }

    const username = message.author.username;
    const userId = message.author.id;
    const timestamp = message.createdAt.toISOString();
    const channelName = message.channel.name;

    try {
        console.log('Sending data to SheetsDB:', {
            data: {
                username: username,
                userId: userId,
                message: content,
                timestamp: timestamp,
                channel: channelName
            }
        });

        const response = await fetch('https://sheetdb.io/api/v1/5fsg4qfkegt2h', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                data: [
                    {
                        username: username,
                        userId: userId,
                        message: content,
                        timestamp: timestamp,
                        messageId: message.id,
                        reactionUpvote: 0,
                        reactionDownvote: 0,
                        channel: channelName
                    }
                ]
            })
        });

        const result = await response.json();

        if (!response.ok) {
            console.error('Response from SheetsDB:', result);
            throw new Error(`Failed to store message: ${response.statusText}`);
        }

        console.log('Result from SheetsDB:', result); // Log the response for debugging purposes

        await message.react(upvote);
        await message.react(downvote);
    } catch (error) {
        console.error('Error storing message in SheetsDB:', error);
        const errorEmbed = new EmbedBuilder()
            .setTitle('Error')
            .setColor(0xff0000)
            .setDescription("There was an error while storing the message. Please try again later.")
            .setTimestamp();
        await message.channel.send({ embeds: [errorEmbed] });
    }
});

client.login(token);
